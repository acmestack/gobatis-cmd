/*
 * Copyright (c) 2022, AcmeStack
 * All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package generator

import (
	"fmt"
	"github.com/acmestack/gobatis-cmd/pkg/common"
	"github.com/acmestack/gobatis-cmd/pkg/config"
	"github.com/acmestack/gobatis-cmd/pkg/io"
	"path/filepath"
	"strings"
	"time"
)

func GenV2Proxy(config config.Config, tableName string, models []common.ModelInfo) {
	mapperDir := config.Path
	if !io.IsPathExists(mapperDir) {
		io.Mkdir(mapperDir)
	}
	mapperFile, err := io.OpenAppend(filepath.Join(mapperDir, strings.ToLower(tableName)+"_proxy.go"))
	if err == nil {
		defer mapperFile.Close()

		namespace := ""
		if config.Namespace != "" {
			namespace = config.Namespace + "."
		}
		modelName := common.TableName2ModelName(tableName)
		builder := strings.Builder{}
		builder.WriteString(fmt.Sprintf("//This file was generated by acmestack/gobatis-cmd at"))
		builder.WriteString(common.Newline())
		builder.WriteString("//")
		builder.WriteString(time.Now().String())
		builder.WriteString(common.Newline())
		builder.WriteString(common.Newline())

		builder.WriteString("package ")
		builder.WriteString(config.PackageName)
		builder.WriteString(common.Newline())
		builder.WriteString(common.Newline())

		builder.WriteString("import (")
		builder.WriteString(common.Newline())
		builder.WriteString(common.ColumnSpace())
		builder.WriteString(`"github.com/acmestack/gobatis"`)
		builder.WriteString(common.Newline())
		//builder.WriteString(common.ColumnSpace())
		//builder.WriteString(`"github.com/acmestack/gobatis/factory"`)
		//builder.WriteString(common.Newline())
		//builder.WriteString(common.ColumnSpace())
		//builder.WriteString(`"github.com/acmestack/gobatis/session/runner"`)
		//builder.WriteString(common.Newline())
		builder.WriteString(")")
		builder.WriteString(common.Newline())
		builder.WriteString(common.Newline())

		builder.WriteString("func init() {")
		builder.WriteString(common.Newline())

		builder.WriteString(common.ColumnSpace())
		builder.WriteString(fmt.Sprintf("modelV := %s{}", modelName))
		builder.WriteString(common.Newline())

		builder.WriteString(common.ColumnSpace())
		builder.WriteString("gobatis.RegisterModel(&modelV)")
		builder.WriteString(common.Newline())

		if config.Register {
			if config.MapperFile == "xml" {
				builder.WriteString(common.ColumnSpace())
				builder.WriteString(fmt.Sprintf("gobatis.RegisterMapperFile(\"%sxml/%s_mapper.xml\")", config.Path, strings.ToLower(tableName)))
				builder.WriteString(common.Newline())
			} else if config.MapperFile == "go" {
				builder.WriteString(common.ColumnSpace())
				builder.WriteString(fmt.Sprintf("gobatis.RegisterMapperData([]byte(%sMapper))", modelName))
				builder.WriteString(common.Newline())
			} else if config.MapperFile == "template" {
				builder.WriteString(common.ColumnSpace())
				builder.WriteString(fmt.Sprintf("gobatis.RegisterTemplateFile(\"%stemplate/%s_mapper.tmpl\")", config.Path, strings.ToLower(tableName)))
				builder.WriteString(common.Newline())
			}
		}

		builder.WriteString("}")
		builder.WriteString(common.Newline())
		builder.WriteString(common.Newline())

		//select
		builder.WriteString(fmt.Sprintf("func Select%s(sess *gobatis.Session, model %s) ([]%s, error) {", modelName, modelName, modelName))
		builder.WriteString(common.Newline())

		builder.WriteString(common.ColumnSpace())
		builder.WriteString(fmt.Sprintf("var dataList []%s", modelName))
		builder.WriteString(common.Newline())

		builder.WriteString(common.ColumnSpace())
		builder.WriteString(fmt.Sprintf(`err := sess.Select("%sselect%s").Param(model).Result(&dataList)`, namespace, modelName))
		builder.WriteString(common.Newline())

		builder.WriteString(common.ColumnSpace())
		builder.WriteString("return dataList, err")
		builder.WriteString(common.Newline())

		builder.WriteString("}")
		builder.WriteString(common.Newline())
		builder.WriteString(common.Newline())
		//select end

		//select count
		builder.WriteString(fmt.Sprintf("func Select%sCount(sess *gobatis.Session, model %s) (int64, error) {", modelName, modelName))
		builder.WriteString(common.Newline())

		builder.WriteString(common.ColumnSpace())
		builder.WriteString("var ret int64")
		builder.WriteString(common.Newline())

		builder.WriteString(common.ColumnSpace())
		builder.WriteString(fmt.Sprintf(`err := sess.Select("%sselect%sCount").Param(model).Result(&ret)`, namespace, modelName))
		builder.WriteString(common.Newline())

		builder.WriteString(common.ColumnSpace())
		builder.WriteString("return ret, err")
		builder.WriteString(common.Newline())

		builder.WriteString("}")
		builder.WriteString(common.Newline())
		builder.WriteString(common.Newline())
		//select count end

		//insert
		builder.WriteString(fmt.Sprintf("func Insert%s(sess *gobatis.Session, model %s) (int64, int64, error) {", modelName, modelName))
		builder.WriteString(common.Newline())

		builder.WriteString(common.ColumnSpace())
		builder.WriteString("var ret int64")
		builder.WriteString(common.Newline())

		builder.WriteString(common.ColumnSpace())
		builder.WriteString(fmt.Sprintf(`runner := sess.Insert("%sinsert%s").Param(model)`, namespace, modelName))
		builder.WriteString(common.Newline())

		builder.WriteString(common.ColumnSpace())
		builder.WriteString(`err := runner.Result(&ret)`)
		builder.WriteString(common.Newline())

		builder.WriteString(common.ColumnSpace())
		builder.WriteString(`id := runner.LastInsertId()`)
		builder.WriteString(common.Newline())

		builder.WriteString(common.ColumnSpace())
		builder.WriteString("return ret, id, err")
		builder.WriteString(common.Newline())

		builder.WriteString("}")
		builder.WriteString(common.Newline())
		builder.WriteString(common.Newline())
		//insert end

		//insert batch
		builder.WriteString(fmt.Sprintf("func InsertBatch%s(sess *gobatis.Session, models []%s) (int64, int64, error) {", modelName, modelName))
		builder.WriteString(common.Newline())

		builder.WriteString(common.ColumnSpace())
		builder.WriteString("var ret int64")
		builder.WriteString(common.Newline())

		builder.WriteString(common.ColumnSpace())
		builder.WriteString(fmt.Sprintf(`runner := sess.Insert("%sinsertBatch%s").Param(models)`, namespace, modelName))
		builder.WriteString(common.Newline())

		builder.WriteString(common.ColumnSpace())
		builder.WriteString(`err := runner.Result(&ret)`)
		builder.WriteString(common.Newline())

		builder.WriteString(common.ColumnSpace())
		builder.WriteString(`id := runner.LastInsertId()`)
		builder.WriteString(common.Newline())

		builder.WriteString(common.ColumnSpace())
		builder.WriteString("return ret, id, err")
		builder.WriteString(common.Newline())

		builder.WriteString("}")
		builder.WriteString(common.Newline())
		builder.WriteString(common.Newline())
		//insert batch end

		//update
		builder.WriteString(fmt.Sprintf("func Update%s(sess *gobatis.Session, model %s) (int64, error) {", modelName, modelName))
		builder.WriteString(common.Newline())

		builder.WriteString(common.ColumnSpace())
		builder.WriteString("var ret int64")
		builder.WriteString(common.Newline())

		builder.WriteString(common.ColumnSpace())
		builder.WriteString(fmt.Sprintf(`err := sess.Update("%supdate%s").Param(model).Result(&ret)`, namespace, modelName))
		builder.WriteString(common.Newline())

		builder.WriteString(common.ColumnSpace())
		builder.WriteString("return ret, err")
		builder.WriteString(common.Newline())

		builder.WriteString("}")
		builder.WriteString(common.Newline())
		builder.WriteString(common.Newline())
		//update end

		//delete
		builder.WriteString(fmt.Sprintf("func Delete%s(sess *gobatis.Session, model %s) (int64, error) {", modelName, modelName))
		builder.WriteString(common.Newline())

		builder.WriteString(common.ColumnSpace())
		builder.WriteString("var ret int64")
		builder.WriteString(common.Newline())

		builder.WriteString(common.ColumnSpace())
		builder.WriteString(fmt.Sprintf(`err := sess.Delete("%sdelete%s").Param(model).Result(&ret)`, namespace, modelName))
		builder.WriteString(common.Newline())

		builder.WriteString(common.ColumnSpace())
		builder.WriteString("return ret, err")
		builder.WriteString(common.Newline())

		builder.WriteString("}")
		builder.WriteString(common.Newline())
		builder.WriteString(common.Newline())
		//delete end

		io.Write(mapperFile, []byte(builder.String()))
	}
}
