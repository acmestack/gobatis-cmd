/**
 * Copyright (C) 2019, Xiongfa Li.
 * All right reserved.
 * @author xiongfa.li
 * @version V1.0
 * Description:
 */

package generator

import (
	"fmt"
	"github.com/xfali/gobatis-cmd/pkg/common"
	"github.com/xfali/gobatis-cmd/pkg/config"
	"github.com/xfali/gobatis-cmd/pkg/io"
	"github.com/xfali/gobatis-cmd/pkg/mapping"
	"strings"
	"time"
)

func GenTemplate(config config.Config, tableName string, model []common.ModelInfo) {
	if config.Keyword {
		common.SelectKeywordFormatter(config.Driver)
	}
	targetDir := config.Path + "template/"
	if !io.IsPathExists(targetDir) {
		io.Mkdir(targetDir)
	}
	targetFile, err := io.OpenAppend(targetDir + strings.ToLower(tableName) + "_mapper.tmpl")
	if err == nil {
		defer targetFile.Close()

		builder := strings.Builder{}
		buildTmplMapper(&builder, config, tableName, model)
		io.Write(targetFile, []byte(builder.String()))
	}
}

func buildTmplMapper(builder *strings.Builder, config config.Config, tableName string, model []common.ModelInfo) {
	modelName := common.TableName2ModelName(tableName)
	columns := formatXmlColumns(tableName, model)
	tableName = common.KwFormatter(tableName)

	builder.WriteString("{{/*This file was generated by xfali/gobatis-cmd at*/}}")
	builder.WriteString(common.Newline())
	builder.WriteString(fmt.Sprintf("{{/*%s*/}}", time.Now().String()))
	builder.WriteString(common.Newline())
	builder.WriteString(common.Newline())

	//namespace
	builder.WriteString(`{{define "namespace"}}`)

	builder.WriteString(config.Namespace)

	builder.WriteString(`{{end}}`)
	builder.WriteString(common.Newline())
	builder.WriteString(common.Newline())

	//select
	builder.WriteString(fmt.Sprintf(`{{define "select%s"}}`, modelName))
	builder.WriteString(common.Newline())

	builder.WriteString(fmt.Sprintf(`SELECT %s FROM %s`, columns, tableName))
	builder.WriteString(common.Newline())

	builder.WriteString(genTmplWhere(modelName, model))
	builder.WriteString(common.Newline())

	builder.WriteString(`{{end}}`)
	builder.WriteString(common.Newline())
	builder.WriteString(common.Newline())

    //select count
    builder.WriteString(fmt.Sprintf(`{{define "select%sCount"}}`, modelName))
    builder.WriteString(common.Newline())

    builder.WriteString(fmt.Sprintf(`SELECT COUNT(*) FROM %s`, tableName))
    builder.WriteString(common.Newline())

    builder.WriteString(genTmplWhere(modelName, model))
    builder.WriteString(common.Newline())

    builder.WriteString(`{{end}}`)
    builder.WriteString(common.Newline())
    builder.WriteString(common.Newline())

	//insert
	builder.WriteString(fmt.Sprintf(`{{define "insert%s"}}`, modelName))
	builder.WriteString(common.Newline())

	builder.WriteString(fmt.Sprintf(`INSERT INTO %s(%s)`, tableName, columns))
	builder.WriteString(common.Newline())

	builder.WriteString("VALUES(")
	builder.WriteString(common.Newline())

	builder.WriteString(genTmplValues(modelName, model))

	builder.WriteString(")")
	builder.WriteString(common.Newline())

	builder.WriteString(`{{end}}`)
	builder.WriteString(common.Newline())
	builder.WriteString(common.Newline())

	//insertBatch
	builder.WriteString(fmt.Sprintf(`{{define "insertBatch%s"}}`, modelName))
	builder.WriteString(common.Newline())

	builder.WriteString(`{{$size := len . | add -1}}`)
	builder.WriteString(common.Newline())

	builder.WriteString(fmt.Sprintf(`INSERT INTO %s(%s)`, tableName, columns))
	builder.WriteString(common.Newline())

	builder.WriteString("VALUES {{range $i, $v := .}}")
	builder.WriteString(common.Newline())

	builder.WriteString(genTmplRangeValues(modelName, model))

	builder.WriteString(`{{end}}`)
	builder.WriteString(common.Newline())

	builder.WriteString(`{{end}}`)
	builder.WriteString(common.Newline())
	builder.WriteString(common.Newline())

	//update
	builder.WriteString(fmt.Sprintf(`{{define "update%s"}}`, modelName))
	builder.WriteString(common.Newline())

	builder.WriteString(fmt.Sprintf(`UPDATE %s`, tableName))
	builder.WriteString(common.Newline())

	setStr, index := genTmplSet(modelName, model)
	builder.WriteString(setStr)
	builder.WriteString(common.Newline())

	if index != -1 {
		builder.WriteString(genTmplWhere(modelName, model[index:index+1]))
		builder.WriteString(common.Newline())
	}

	builder.WriteString(`{{end}}`)
	builder.WriteString(common.Newline())
	builder.WriteString(common.Newline())

	//delete
	builder.WriteString(fmt.Sprintf(`{{define "delete%s"}}`, modelName))
	builder.WriteString(common.Newline())

	builder.WriteString(fmt.Sprintf(`DELETE FROM %s`, tableName))
	builder.WriteString(common.Newline())

	builder.WriteString(genTmplWhere(modelName, model))
	builder.WriteString(common.Newline())

	builder.WriteString(`{{end}}`)
	builder.WriteString(common.Newline())
	builder.WriteString(common.Newline())
}

func genTmplWhere(modelName string, model []common.ModelInfo) string {
	builder := strings.Builder{}

	builder.WriteString("{{")
	for i := range model {
		field := common.Column2Modelfield(model[i].ColumnName)
		if i == 0 {
			builder.WriteString(fmt.Sprintf(`where .%s "AND" "%s = " (arg .%s) ""`, field, common.CommonEscapeKeywordFormatter(model[i].ColumnName), field))
		} else {
			builder.WriteString(fmt.Sprintf(` | where .%s "AND" "%s = " (arg .%s)`, field, common.CommonEscapeKeywordFormatter(model[i].ColumnName), field))
		}
	}
	builder.WriteString("}}")

	return builder.String()
}

func genTmplSet(modelName string, model []common.ModelInfo) (string, int) {
	builder := strings.Builder{}

	index := -1
	builder.WriteString("{{")
	for i := range model {
		field := common.Column2Modelfield(model[i].ColumnName)
		if i == 0 {
			builder.WriteString(fmt.Sprintf(`set .%s "%s = " (arg .%s) ""`, field, common.CommonEscapeKeywordFormatter(model[i].ColumnName), field))
		} else {
			builder.WriteString(fmt.Sprintf(` | set .%s "%s = " (arg .%s)`, field, common.CommonEscapeKeywordFormatter(model[i].ColumnName), field))
		}
		if strings.ToUpper(model[i].ColumnKey) == "PRI" {
			index = i
			continue
		}
	}
	builder.WriteString("}}")

	return builder.String(), index
}

func genTmplValues(modelName string, model []common.ModelInfo) string {
	builder := strings.Builder{}

	size := len(model)
	for i := range model {
		builder.WriteString(fmt.Sprintf("{{arg .%s}}", common.Column2Modelfield(model[i].ColumnName)))
		size--
		if size > 0 {
			builder.WriteString(", ")
		}
	}

	return builder.String()
}

func genTmplRangeValues(modelName string, model []common.ModelInfo) string {
	builder := strings.Builder{}

	builder.WriteString(`(`)
	size := len(model)
	for i := range model {
		builder.WriteString(fmt.Sprintf("{{arg $v.%s}}", common.Column2Modelfield(model[i].ColumnName)))
		size--
		if size > 0 {
			builder.WriteString(", ")
		}
	}

	builder.WriteString(`){{if lt $i $size}},{{end}}`)
	builder.WriteString(common.Newline())
	return builder.String()
}

func getTmplCond(ctype string) string {
	return mapping.SqlType2IfCondMap[ctype]
}
