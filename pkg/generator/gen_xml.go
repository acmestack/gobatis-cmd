/*
 * Copyright (c) 2022, AcmeStack
 * All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package generator

import (
	"fmt"
	"github.com/acmestack/gobatis-cmd/pkg/common"
	"github.com/acmestack/gobatis-cmd/pkg/config"
	"github.com/acmestack/gobatis-cmd/pkg/io"
	"github.com/acmestack/gobatis-cmd/pkg/mapping"
	"path/filepath"
	"strings"
	"time"
)

func GenXml(config config.Config, tableName string, model []common.ModelInfo) {
	if config.Keyword {
		common.SelectKeywordFormatter(config.Driver)
	}
	if config.MapperFile == "xml" {
		xmlDir := filepath.Join(config.Path, "xml/")
		if !io.IsPathExists(xmlDir) {
			io.Mkdir(xmlDir)
		}
		xmlFile, err := io.OpenAppend(filepath.Join(xmlDir, strings.ToLower(tableName)+"_mapper.xml"))
		if err == nil {
			defer xmlFile.Close()

			builder := strings.Builder{}
			buildMapper(&builder, config, tableName, model,
				formatXmlColumns, common.KwFormatter, common.KwFormatter)
			io.Write(xmlFile, []byte(builder.String()))
		}
	} else if config.MapperFile == "go" {
		xmlDir := config.Path
		if !io.IsPathExists(xmlDir) {
			io.Mkdir(xmlDir)
		}
		xmlFile, err := io.OpenAppend(filepath.Join(xmlDir, strings.ToLower(tableName)+"_mapper.go"))
		if err == nil {
			defer xmlFile.Close()

			builder := strings.Builder{}

			builder.WriteString("package ")
			builder.WriteString(config.PackageName)
			builder.WriteString(common.Newline())
			builder.WriteString(common.Newline())

			builder.WriteString(fmt.Sprintf("var %sMapper = `", common.TableName2ModelName(tableName)))
			builder.WriteString(common.Newline())

			buildMapper(&builder, config, tableName, model,
				formatGoColumns, formatBackQuoteGo, formatBackQuoteGo)
			builder.WriteString("`")
			builder.WriteString(common.Newline())

			io.Write(xmlFile, []byte(builder.String()))
		}
	}
}

type fomatter func(string) string

func buildMapper(builder *strings.Builder, config config.Config, tableName string, model []common.ModelInfo,
	columnsFunc func(string, []common.ModelInfo) string, tableFunc, columnFunc fomatter) {
	modelName := common.TableName2ModelName(tableName)
	builder.WriteString(fmt.Sprintf("<!--This file was generated by acmestack/gobatis-cmd at -->"))
	builder.WriteString(common.Newline())
	builder.WriteString(fmt.Sprintf("<!--%s-->", time.Now().String()))
	builder.WriteString(common.Newline())
	builder.WriteString(common.Newline())

	builder.WriteString(fmt.Sprintf("<mapper namespace=\"%s\">", config.Namespace))
	builder.WriteString(common.Newline())

	builder.WriteString(common.ColumnSpace())
	builder.WriteString("<sql id=\"columns_id\">")
	columns := columnsFunc(tableName, model)

	builder.WriteString(columns)
	builder.WriteString("</sql>")
	builder.WriteString(common.Newline())
	builder.WriteString(common.Newline())

	tableName = tableFunc(tableName)

	//select
	builder.WriteString(common.ColumnSpace())
	builder.WriteString(fmt.Sprintf("<select id=\"select%s\">", modelName))
	builder.WriteString(common.Newline())
	builder.WriteString(common.ColumnSpace())
	builder.WriteString(common.ColumnSpace())
	builder.WriteString(fmt.Sprintf("SELECT <include refid=\"columns_id\"> </include> FROM %s", tableName))
	builder.WriteString(common.Newline())
	builder.WriteString(common.ColumnSpace())
	builder.WriteString(common.ColumnSpace())
	builder.WriteString("<where>")
	builder.WriteString(common.Newline())
	for _, f := range model {
		fieldName := common.Column2DynamicName(modelName, f.ColumnName)
		builder.WriteString(common.ColumnSpace())
		builder.WriteString(common.ColumnSpace())
		builder.WriteString(common.ColumnSpace())
		builder.WriteString(fmt.Sprintf("<if test=\"%s\">AND %s = #{%s} </if>",
			getIfStr(f.DataType, fieldName), columnFunc(f.ColumnName), fieldName))
		builder.WriteString(common.Newline())
	}
	builder.WriteString(common.ColumnSpace())
	builder.WriteString(common.ColumnSpace())
	builder.WriteString("</where>")
	builder.WriteString(common.Newline())
	builder.WriteString(common.ColumnSpace())
	builder.WriteString("</select>")
	builder.WriteString(common.Newline())
	builder.WriteString(common.Newline())
	//select end

	//select count
	builder.WriteString(common.ColumnSpace())
	builder.WriteString(fmt.Sprintf("<select id=\"select%sCount\">", modelName))
	builder.WriteString(common.Newline())
	builder.WriteString(common.ColumnSpace())
	builder.WriteString(common.ColumnSpace())
	builder.WriteString(fmt.Sprintf("SELECT COUNT(*) FROM %s", tableName))
	builder.WriteString(common.Newline())
	builder.WriteString(common.ColumnSpace())
	builder.WriteString(common.ColumnSpace())
	builder.WriteString("<where>")
	builder.WriteString(common.Newline())
	for _, f := range model {
		fieldName := common.Column2DynamicName(modelName, f.ColumnName)
		builder.WriteString(common.ColumnSpace())
		builder.WriteString(common.ColumnSpace())
		builder.WriteString(common.ColumnSpace())
		builder.WriteString(fmt.Sprintf("<if test=\"%s\">AND %s = #{%s} </if>",
			getIfStr(f.DataType, fieldName), columnFunc(f.ColumnName), fieldName))
		builder.WriteString(common.Newline())
	}
	builder.WriteString(common.ColumnSpace())
	builder.WriteString(common.ColumnSpace())
	builder.WriteString("</where>")
	builder.WriteString(common.Newline())
	builder.WriteString(common.ColumnSpace())
	builder.WriteString("</select>")
	builder.WriteString(common.Newline())
	builder.WriteString(common.Newline())
	//select count

	//insert
	builder.WriteString(common.ColumnSpace())
	builder.WriteString(fmt.Sprintf("<insert id=\"insert%s\">", modelName))
	builder.WriteString(common.Newline())
	builder.WriteString(common.ColumnSpace())
	builder.WriteString(common.ColumnSpace())
	builder.WriteString(fmt.Sprintf("INSERT INTO %s (%s)", tableName, columns))
	builder.WriteString(common.Newline())
	builder.WriteString(common.ColumnSpace())
	builder.WriteString(common.ColumnSpace())
	builder.WriteString("VALUES(")
	builder.WriteString(common.Newline())
	for i := range model {
		builder.WriteString(common.ColumnSpace())
		builder.WriteString(common.ColumnSpace())
		//builder.WriteString(fmt.Sprintf("#{%s}", common.Column2Modelfield(model[i].ColumnName)))
		builder.WriteString(fmt.Sprintf("#{%s}", common.Column2DynamicName(modelName, model[i].ColumnName)))
		if i < len(model)-1 {
			builder.WriteString(",")
		}
		builder.WriteString(common.Newline())
	}
	builder.WriteString(common.ColumnSpace())
	builder.WriteString(common.ColumnSpace())
	builder.WriteString(")")
	builder.WriteString(common.Newline())
	builder.WriteString(common.ColumnSpace())
	builder.WriteString("</insert>")
	builder.WriteString(common.Newline())
	builder.WriteString(common.Newline())
	//insert end

	//insert batch
	builder.WriteString(common.ColumnSpace())
	builder.WriteString(fmt.Sprintf("<insert id=\"insertBatch%s\">", modelName))
	builder.WriteString(common.Newline())
	builder.WriteString(common.ColumnSpace())
	builder.WriteString(common.ColumnSpace())
	builder.WriteString(fmt.Sprintf("INSERT INTO %s (%s)", tableName, columns))
	builder.WriteString(common.Newline())
	builder.WriteString(common.ColumnSpace())
	builder.WriteString(common.ColumnSpace())
	builder.WriteString("VALUES")
	builder.WriteString(common.Newline())

	builder.WriteString(common.ColumnSpace())
	builder.WriteString(common.ColumnSpace())
	builder.WriteString(`<foreach item="item" index="index" collection="{0}" open="" separator="," close="">`)
	builder.WriteString(common.Newline())

	builder.WriteString(common.ColumnSpace())
	builder.WriteString(common.ColumnSpace())
	builder.WriteString(common.ColumnSpace())
	builder.WriteString("(")
	for i := range model {
		builder.WriteString(fmt.Sprintf("#{item.%s}", common.Column2DynamicName(modelName, model[i].ColumnName)))
		if i < len(model)-1 {
			builder.WriteString(",")
		}
	}
	builder.WriteString(")")
	builder.WriteString(common.Newline())

	builder.WriteString(common.ColumnSpace())
	builder.WriteString(common.ColumnSpace())
	builder.WriteString(`</foreach>`)
	builder.WriteString(common.Newline())

	builder.WriteString(common.ColumnSpace())
	builder.WriteString("</insert>")
	builder.WriteString(common.Newline())
	builder.WriteString(common.Newline())
	//insert end

	//update
	builder.WriteString(common.ColumnSpace())
	builder.WriteString(fmt.Sprintf("<update id=\"update%s\">", modelName))
	builder.WriteString(common.Newline())
	builder.WriteString(common.ColumnSpace())
	builder.WriteString(common.ColumnSpace())
	builder.WriteString(fmt.Sprintf("UPDATE %s", tableName))
	builder.WriteString(common.Newline())
	builder.WriteString(common.ColumnSpace())
	builder.WriteString(common.ColumnSpace())
	builder.WriteString("<set>")
	builder.WriteString(common.Newline())
	index := -1
	for i, f := range model {
		if strings.ToUpper(f.ColumnKey) == "PRI" {
			index = i
			continue
		}
		fieldName := common.Column2DynamicName(modelName, f.ColumnName)
		builder.WriteString(common.ColumnSpace())
		builder.WriteString(common.ColumnSpace())
		builder.WriteString(common.ColumnSpace())
		builder.WriteString(fmt.Sprintf("<if test=\"%s\"> %s = #{%s} </if>",
			getIfStr(f.DataType, fieldName), columnFunc(f.ColumnName), fieldName))
		builder.WriteString(common.Newline())
	}
	builder.WriteString(common.ColumnSpace())
	builder.WriteString(common.ColumnSpace())
	builder.WriteString("</set>")
	builder.WriteString(common.Newline())
	if index != -1 {
		f := model[index]
		builder.WriteString(common.ColumnSpace())
		builder.WriteString(common.ColumnSpace())
		builder.WriteString(fmt.Sprintf("WHERE %s = #{%s}",
			columnFunc(f.ColumnName), common.Column2DynamicName(modelName, f.ColumnName)))
		builder.WriteString(common.Newline())
	}
	builder.WriteString(common.ColumnSpace())
	builder.WriteString("</update>")
	builder.WriteString(common.Newline())
	builder.WriteString(common.Newline())
	//update end

	//delete
	builder.WriteString(common.ColumnSpace())
	builder.WriteString(fmt.Sprintf("<delete id=\"delete%s\">", modelName))
	builder.WriteString(common.Newline())
	builder.WriteString(common.ColumnSpace())
	builder.WriteString(common.ColumnSpace())
	builder.WriteString(fmt.Sprintf("DELETE FROM %s", tableName))
	builder.WriteString(common.Newline())
	builder.WriteString(common.ColumnSpace())
	builder.WriteString(common.ColumnSpace())
	builder.WriteString("<where>")
	builder.WriteString(common.Newline())
	for _, f := range model {
		fieldName := common.Column2DynamicName(modelName, f.ColumnName)
		builder.WriteString(common.ColumnSpace())
		builder.WriteString(common.ColumnSpace())
		builder.WriteString(common.ColumnSpace())
		builder.WriteString(fmt.Sprintf("<if test=\"%s\">AND %s = #{%s} </if>",
			getIfStr(f.DataType, fieldName), columnFunc(f.ColumnName), fieldName))
		builder.WriteString(common.Newline())
	}
	builder.WriteString(common.ColumnSpace())
	builder.WriteString(common.ColumnSpace())
	builder.WriteString("</where>")
	builder.WriteString(common.Newline())
	builder.WriteString(common.ColumnSpace())
	builder.WriteString("</delete>")
	builder.WriteString(common.Newline())
	//delete end

	builder.WriteString("</mapper>")
	builder.WriteString(common.Newline())
}

func getIfStr(ctype, name string) string {
	return strings.Replace(mapping.SqlType2IfFormatMap[ctype], "%s", fmt.Sprintf("{%s}", name), -1)
}

func formatXmlColumns(tableName string, model []common.ModelInfo) string {
	columns := ""
	for i := range model {
		columns += common.KwFormatter(model[i].ColumnName)
		if i < len(model)-1 {
			columns += ","
		}
	}
	return columns
}

func formatGoColumns(tableName string, model []common.ModelInfo) string {
	columns := "` + \""
	for i := range model {
		columns += common.KwFormatter(model[i].ColumnName)
		if i < len(model)-1 {
			columns += ","
		}
	}
	columns += "\" + `"
	return columns
}

func formatBackQuoteGo(src string) string {
	return "` + \"`" + src + "`\" + `"
}
